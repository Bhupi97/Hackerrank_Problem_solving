#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'climbingLeaderboard' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER_ARRAY ranked
#  2. INTEGER_ARRAY player
#

def climbingLeaderboard(ranked, player):
    # Write your code here
    ranks = []
    r = 0
    result = []
    for i in range(len(ranked)-1):
        if ranked[i] == max(ranked):
            ranks.append(1)
        elif ranked[i] == ranked[i+1]:
            ranks.append(ranks[-1])
        if ranked[i] > ranked[i+1]:
            ranks.append(ranks[-1]+1)
    #print(ranks)
    for j in range(len(player)):
        if player[j] > ranked[0]:
            result.append(ranks[0])
        elif player[j] < ranked[-1]:
            result.append(ranks[-1]+1)
        else:
            ind = binary_search(ranked, player[j])
            result.append(ranks[binary_search(ranked, player[j])])
            
    return result
            
            
def binary_search(arr, e):
    low = 0
    high = len(arr) - 1
    mid = 0
    
    while low <= high:
        mid = (high+low)//2
        
        if arr[mid] == e:
            return mid
        
        elif arr[mid] < e and e < arr[mid-1]:
            return mid
        
        elif arr[mid] > e and e >= arr[mid+1]:
            return mid+1
        
        elif arr[mid] < e:
            high = mid - 1
        elif arr[mid] > e:
            low = mid + 1
        
    return -1
            
            
            
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ranked_count = int(input().strip())

    ranked = list(map(int, input().rstrip().split()))

    player_count = int(input().strip())

    player = list(map(int, input().rstrip().split()))

    result = climbingLeaderboard(ranked, player)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
